{"version":3,"sources":["components/FormsControls/FormControls.module.css","components/FormsControls/FormsControls.js","validators/validators.js","components/Login/Login.module.css","components/Login/Login.jsx"],"names":["module","exports","Textarea","input","meta","props","hasError","touched","error","className","style","formControl","Input","requiredField","value","maxLengthCreator","maxLength","length","maxLength50","ReduxLoginForm","reduxForm","form","onSubmit","handleSubmit","styles","warning","placeholder","name","component","validate","type","formAnyError","button","connect","state","isAuth","auth","login","logout","to","formData","email","password","rememberMe"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,YAAc,kCAAkC,MAAQ,4BAA4B,aAAe,qC,yJCExGC,EAAW,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,KAASC,EAAY,gCAC7CC,EAAWF,EAAKG,SAAWH,EAAKI,MAEtC,OACI,sBAAKC,UAAWC,IAAMC,YAAc,KAAOL,EAAWI,IAAMF,MAAQ,IAApE,UACI,8BACI,oDAAcL,GAAWE,MAE3BC,GAAY,+BAAOF,EAAKI,YAKzBI,EAAQ,SAAC,GAA+B,IAA7BT,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,KAASC,EAAY,gCAC1CC,EAAWF,EAAKG,SAAWH,EAAKI,MAEtC,OACI,sBAAKC,UAAWC,IAAMC,YAAc,KAAOL,EAAWI,IAAMF,MAAQ,IAApE,UACI,8BACI,iDAAWL,GAAWE,MAExBC,GAAY,+BAAOF,EAAKI,a,iCCxBtC,oEAAO,IAAMK,EAAgB,SAAAC,GACzB,IAAIA,EACJ,MAAO,sGAGEC,EAAmB,SAACC,GAAD,OAAe,SAACF,GAC5C,GAAIA,GAASA,EAAMG,OAASD,EAAW,MAAM,2GAAN,OAA6BA,EAA7B,iE,oBCL3ChB,EAAOC,QAAU,CAAC,OAAS,sBAAsB,QAAU,yB,iCCD3D,sHAUMiB,EAAcH,YAAiB,IAwB/BI,EAAiBC,YAAU,CAAEC,KAAM,SAAlBD,EAtBL,SAACf,GAEf,OACI,uBAAMiB,SAAUjB,EAAMkB,aAAcd,UAAWe,IAA/C,UACI,uCACA,sBAAKf,UAAWe,IAAOC,QAAvB,0IACQ,mDADR,aAEW,wCACX,8BACI,cAAC,IAAD,CAAOC,YAAY,mDAAgBC,KAAM,QAASC,UAAWhB,IAAOiB,SAAU,CAAChB,IAAeK,OAElG,8BACI,cAAC,IAAD,CAAOQ,YAAY,kFAAiBC,KAAM,WAAYG,KAAM,WAAYF,UAAWhB,IAAOiB,SAAU,CAAChB,IAAeK,OAEvHb,EAAMG,OAAS,qBAAKC,UAAWC,IAAMqB,aAAtB,SAAqC1B,EAAMG,QAC3D,8BACI,wBAAQC,UAAWe,IAAOQ,OAA1B,oDAoBDC,uBAHS,SAACC,GAAD,MAAY,CAChCC,OAAQD,EAAME,KAAKD,UAEiB,CAAEE,UAAOC,YAAlCL,EAZD,SAAC5B,GAKX,OAAIA,EAAM8B,OAAe,cAAC,IAAD,CAAUI,GAAI,aAEhC,cAACpB,EAAD,CAAgBG,SANN,SAACkB,GACdnC,EAAMgC,MAAMG,EAASC,MAAOD,EAASE,SAAUF,EAASG","file":"static/js/7.51138c20.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__P_EJZ\",\"error\":\"FormControls_error__1D48X\",\"formAnyError\":\"FormControls_formAnyError__3-0vq\"};","import React from 'react';\r\nimport style from './FormControls.module.css'\r\n\r\nexport const Textarea = ({ input, meta, ...props }) => {\r\n    const hasError = meta.touched && meta.error;\r\n\r\n    return (\r\n        <div className={style.formControl + ' ' + (hasError ? style.error : '')}>\r\n            <div>\r\n                <textarea {...input} {...props} />\r\n            </div>\r\n            { hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Input = ({ input, meta, ...props }) => {\r\n    const hasError = meta.touched && meta.error;\r\n\r\n    return (\r\n        <div className={style.formControl + ' ' + (hasError ? style.error : '')}>\r\n            <div>\r\n                <input {...input} {...props} />\r\n            </div>\r\n            { hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}","export const requiredField = value => {\r\n    if (value) return undefined;\r\n    return 'Обязательное поле!';\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if (value && value.length > maxLength) return `Максимальная длина ${maxLength} символа(ов)!`;\r\n    return undefined;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Login_button__1NZAc\",\"warning\":\"Login_warning__1YP6o\"};","import React from 'react';\r\nimport { connect } from 'react-redux'\r\nimport { Redirect } from 'react-router-dom';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { Input } from '../FormsControls/FormsControls';\r\nimport { login, logout } from '../../Store/authReducer';\r\nimport style from '../FormsControls/FormControls.module.css';\r\nimport styles from './Login.module.css'\r\nimport { requiredField, maxLengthCreator } from '../../validators/validators'\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nconst LoginForm = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit} className={styles}>\r\n            <h1>LOGIN</h1>\r\n            <div className={styles.warning}>Для входа используйте:\r\n             email: <b>free@samuraijs.com</b>\r\n             password: <b>free</b></div>\r\n            <div>\r\n                <Field placeholder='Введите email' name={'email'} component={Input} validate={[requiredField, maxLength50]} />\r\n            </div>\r\n            <div>\r\n                <Field placeholder='Введите пароль' name={'password'} type={'password'} component={Input} validate={[requiredField, maxLength50]} />\r\n            </div>\r\n            {props.error && <div className={style.formAnyError}>{props.error}</div>}\r\n            <div>\r\n                <button className={styles.button}>Войти</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ReduxLoginForm = reduxForm({ form: 'login' })(LoginForm)\r\n\r\nconst Login = (props) => {\r\n    const onSubmit = (formData) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe)\r\n    }\r\n\r\n    if (props.isAuth) return <Redirect to={'/profile'} />\r\n\r\n    return <ReduxLoginForm onSubmit={onSubmit} />\r\n}\r\nconst mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\nexport default connect(mapStateToProps, { login, logout })(Login);"],"sourceRoot":""}